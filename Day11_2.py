def count_taken(seats):
    counter = 0
    for r in range(len(seats)):
        for c in range(len(seats[0])):
            if seats[r][c] == "#":
                counter += 1
    print(counter)
    
def top_taken(row, column, array):
    # might only need to return taken or not
    # return True if taken, False if not taken
    current_row = row
    while current_row > 0:
        current_row -= 1
        current_check = array[current_row][column]
        if current_check == ".":
            continue
        elif current_check == "L":
            return False
        elif current_check == "#":
            return True
    return False

def bottom_taken(row, column, array):
    # might only need to return taken or not
    # return True if taken, False if not taken
    current_row = row
    while current_row < len(array)-1:
        current_row += 1
        current_check = array[current_row][column]
        if current_check == ".":
            continue
        elif current_check == "L":
            return False
        elif current_check == "#":
            return True
    return False

def right_taken(row, column, array):
    current_col = column
    while current_col < len(array[0])-1:
        current_col+=1
        current_check = array[row][current_col]
        if current_check == ".":
            continue
        elif current_check == "L":
            return False
        elif current_check == "#":
            return True
    return False
    
def left_taken(row, column, array):
    current_col = column
    while current_col > 0:
        current_col-=1
        current_check = array[row][current_col]
        if current_check == ".":
            continue
        elif current_check == "L":
            return False
        elif current_check == "#":
            return True
    return False
    
def top_right_taken(row, column, array):
    current_row = row
    current_col = column
    while current_row > 0 and current_col < len(array[0])-1:
        current_row -= 1
        current_col += 1
        current_check = array[current_row][current_col]
        if current_check == ".":
            continue
        elif current_check == "L":
            return False
        elif current_check == "#":
            return True
    return False
    
def top_left_taken(row, column, array):
    current_row = row
    current_col = column
    while current_row > 0 and current_col > 0:
        current_row -= 1
        current_col -= 1
        current_check = array[current_row][current_col]
        if current_check == ".":
            continue
        elif current_check == "L":
            return False
        elif current_check == "#":
            return True
    return False

def bottom_right_taken(row, column, array):
    current_row = row
    current_col = column
    while current_row < len(array)-1 and current_col < len(array[0])-1:
        current_row += 1
        current_col += 1
        current_check = array[current_row][current_col]
        if current_check == ".":
            continue
        elif current_check == "L":
            return False
        elif current_check == "#":
            return True
    return False
    
def bottom_left_taken(row, column, array):
    current_row = row
    current_col = column
    while current_row < len(array)-1 and current_col > 0:
        current_row += 1
        current_col -= 1
        current_check = array[current_row][current_col]
        if current_check == ".":
            continue
        elif current_check == "L":
            return False
        elif current_check == "#":
            return True
    return False

def should_occupy(row,column, array): # currently empty "L"
    # if none of the surround returns True, then change to taken (return True)
    if left_taken(row,column,array) or right_taken(row,column,array) or top_taken(row,column,array) or bottom_taken(row,column,array) or top_right_taken(row,column,array) or top_left_taken(row,column,array) or bottom_right_taken(row,column,array) or bottom_left_taken(row,column,array):
        return False
    else:
        return True
        
def should_leave(row,column,array): # currently taken "#"
    taken_count = 0
    if left_taken(row,column,array):
        taken_count+=1
    if right_taken(row,column,array):
        taken_count+=1
    if top_taken(row,column,array):
        taken_count+=1
    if bottom_taken(row,column,array):
        taken_count+=1
    if top_right_taken(row,column,array):
        taken_count+=1
    if top_left_taken(row,column,array):
        taken_count+=1
    if bottom_right_taken(row,column,array):
        taken_count+=1
    if bottom_left_taken(row,column,array):
        taken_count+=1
    if taken_count > 4:
        return True
    else:
        return False

def update_seats(seats):
    b = []
    for r in range(len(seats)):
        b.append("")
        for c in range(len(seats[0])):
            current_seat = seats[r][c]
            if current_seat == ".":
                b[r] += "."
            elif current_seat == "L": #currently empty
                if should_occupy(r,c,seats):
                    b[r] += "#"
                else:
                    b[r] += "L"
            elif current_seat == "#": #currently occupied
                if should_leave(r,c,seats):
                    b[r] += "L"
                else:
                    b[r] += "#"
    return b
            

a = ["L.LL.LL.LL","LLLLLLL.LL","L.L.L..L..","LLLL.LL.LL","L.LL.LL.LL","L.LLLLL.LL","..L.L.....","LLLLLLLLLL","L.LLLLLL.L","L.LLLLL.LL"]
b = ["LLLLLL.LLLLLLLLL.LLLLLLL.LLLLLLLLLLLLLLL.LLLLLL.LLLLLLL.LLLLLLLLLLLLL.LLLLL.LLLLLLLLLLLLLLL","LLLLLL.LLLLLLLLL.LLLLLLL.LLLLLLLLL.LLLLL.LLLLLL.LLLLLLL.LLLLLLL.LLLLL.LLLLL.LLLLLLLLLLLLLLL","LLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLLLL.LLLLL.LLLLLLLLLLLLLL.LLLLLLL.LLLLLLLLLLL.LLLLLLLL.LLLLLL","LLLLLL.LLLLLLLLL.LLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLL.LLLLL.LLLLLLLL.LLLLLL","LLLLLLLLLLLLLLLL.LLLLLLL.LLLLLLLLL.LLLLLLLLLLLL.LLLLLLL.LLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLL",".......L.L.....LL..L....LLL...L...........L.....L...LL...L.....L..LL..L..L.L...L........L.L","LLLLLL.LLLLLLLLL.LLLLLLL.LLLLLLLLL.LLLLL.LLLLLLLLLLLLLL.LLLLLLL.LLLLLLLLLLL.LLLLLLLL.LLLLLL","LLL.LL.LLLLLLLLL.LLLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLL.LLLLL.LLLLLLLLLLLLLLL","LLLLLL.LLLLLLLLL.LLLLLLL.LLLLLLLLLLLLLLL.LLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLLLL.LLLLLLLLLLLLLL.","LLLLLLLLLLLLLLLL.LLLLLLL.LLLLLLLLLLLLLLL.LLLLL..LLLLLLL.LLLLLLL.LLLLL.LLLLL.LLLLLLLL.LLLLLL","LLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLLLL.LLLLL.LLLLLL.LLLLLLL.LLLLLLL.LLLLL.LLLLL.LLLLLLLLLLLLLLL","LLLLLL.LLLLLLLLL.LLLLLLL.LLLLLLLLLLLLLLL.LLLLLL.LLLLLLL.LLLLLLLLLLLLL.LLLLL.LLLLLLLLLLLLLLL","LLLLLL.LLLLLLLLLLLLLLLLL.LLLLLLLLLLLL.LL.LLLLLLLLLLLLLLLLLLLLLL.LLLLL.LLLLL.LLLLLLLL.LLLLLL","LLLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLL.LLLLL.LLLLLLLLLLLLLLLLLLLLLL.LLLLL.LLLLL.LLLLLLLL.LLLLLL","L.LLL..L...L.L.......L....L..LLL........LLL..L..L....LLLLLLL.......L.L...L........LL.L..L..","LLLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLL.LLLLLLLLLLLL.LLLLLLL.LLLLLLL.LLLLLLLLLLL.LLLLLLLLLLLLLLL","LLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLLLL.LLLLL.LLLLLLLLLLLLLL.LLLLLLL.LLLLLLLLLLL.LLLLLLLL.LLLLLL","LLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLLL.LLLLLLLLLLLLLLL.LLLLL.LLLLL.LLLLLLLL.LLLLLL","LLLLLL.LLLLLLLLL.LLLLLLL.LLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLL.LLLLL.LLLLL.LLLLLLLLLLLLLLL","LLLLLL.LLLLLLLLLLLLLLLLL.LLLLLLLLL.LLLLL.LLLLLLLLLLLLLL.LLLLLLLLLLLLL.LLLLL.LLLLLLLL.LLLLLL","LLLLLL.LLLLLLLLLLLLLLLLL.LLLLLLLLL.LLLLL.LLLLLLLLLLLLLL.LLLLLLL.LLLLL.LLLLL.LLLLLLLLLLLLLLL",".L..LLLLL.....L..L...L....L..LLL.L.....L......L..LL......L.L...LLL..LLLL......LL.L.L...L...","LLLLLLL.LL.LLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLL.LL.LLLLLLL.LLL.LLLLLLLLL.LLLLLLLLLLLLLLLLLLLLL","LLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLL.LLLLLL.LLLLLLL.LLLLLLL.LLLLL.LLLLL..LLLLLLL.LLLLLL","LLLLLLLL.LLLLLLLLLLLLLLL.LLLLLLLLL.LLLLL.LLLLLL.LLLLLLLLLLLLLLLLLLLLL.LLLLL.LLLLLLLLLLLLL.L","LLLLLLL.LLLLLLLLLLLLLLLL.LLLLLLLLL.LLLLL.LLLLLL.LLLLLLL.LLLLLLLLLLLLL.LLLLL.LLLLLLLL.LLLLLL","LLLLLL.LLLLLLLLLLLLLLLLL.LLLLLLLLL.LLLLL.LLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","LLLLLL.LLLLLLLLL.LLLLLLL.LLLLLLLLL.LLLLL.LLLLLL.LLLLLLL.LLLLLLL.LLLLL.LLLLLLLLLLLLLL.LLLLLL","LLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLL.LLLLLL.LLLLLLLLLLLLLLL.LLLLL.LLLLLLLLLLLLLL.LLLL.L","LLLLLLL.LLLLLLLL.LLLLLLL.LLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLL.LLLLL.LLLLLLLLLLLLLL.LLLLLL","L..........LLL....LL...............L.....L.......L......L..L.L...L..LL.......L..L...L....LL","LLLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLL..LLLLLLLLLLL.LLLLLLL.LLLLLLL.LLLLLLLLLLLLLLLL.LLL.LLLLLL","LLLLLLLLLLLLLLLL.LLLLLLL.LLLLLLLLL.LLLLL.LLLLLL.LLLLLLLLLL.LLLLLLLLLL.LLLLL.LLLLLLLL.LLLLLL","LLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLLLL.LLLLL.LLLLLLLLLLLLLLLLLLLLLL.LLLLL.LLLLL.LLLLLLLLLLLLLLL","LLLLLL.LLLLLLLLL.LLLLLL.LLLLLLLLLLLLLLLL.LLLLLL.LLLLLLL.LLLLLLLLLLLL.LLLLLLLLLLLLLLL.LLLLLL","L...L..L..L.L...L..L.L.....L....L..L...L....L.LL..L.L...L.L.LL....LL..L..L......L.L...L..L.","LLLLLL.LLLLLLLLL.LLLLLLL.LLLLLLLLL.LLLLLLLLLLLL.LLLLLLLLLLLLLLL.LLLLL.LLLLL.LLLLLLLL.LLLLLL","LLLLLL.LLLLLLLLL.LLLLLLL.LLLLLLLLL.LLLLL.LLLLLL.LLLLLLLLLLLLLLLLLLLLL.LLLLL.LLLLLLLLLLLLLLL","LLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLLLL.LLLLL.LLLLLL.LLLLLLL.LLLLL.L.LLLLL.LLLLL..LLLLLLL.LLLLLL","LLLLLL.LLLLLLL.L.LLLLLLL.LLLLLLLLL.LLLLL.LLLLLLLLLLLLLLLLLLL.LL.LLLLL.LLLLL.LLLLLLLLLLLLLLL","LLLLLL.LLLLLLLLL.LLLLLLL.LLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLL.LLLLL.LLLLL.LLLLLLLLLLLLLLL","....L....L.L..LL.L...LLL.L.L..L........L..L..L....L..LL..L.L....L......LL.L.......L.LL....L","LLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLL.LLLLL.LLLLLLLLLLLLLL.LLLLLLL.LLLLL.LLLLL.LLLLLLLL.LLLLLL","LLLLLL.LLLLLLLLLLLLLLLLL.LLLL.LLLLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLLLLLL.LLLLLLLLLLLLLL.LLLLLL","LLLLLL.LLLLLLLLL.LLLLLLL.LLLLLLLLL.LLLLLLLLLLLL.LLLLLLLLLLLLLLL.LLLLL.LLLLLLLLLLLLLL.LLLLLL","LLLLLL.LLLLLLLLL.LLLLLLL.LLLLLLLLL.LLLLLLLLLLLL.LLLLLLL.LL.LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","LLLLLLLLLLLLLLLL.LLLLL.LLLLL.LLLLL.LLLLL.LLLLLL.LLLLLLL.LLLLLLL.LLLLLLLLLLL.LLLLLLLL.LLLLLL","LLLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLLLLLLL.LLLLLLL.LLLLLLLLLLL.LLLLLLLL.LLLLLL","LLLLLLLLLLLLLLLL.LLLLLLL.LLLLLLLLL.LLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLL.LLLLLLLL.LLLLLL","LLLLLL.LLLLLLLLL.LLLLLLL.LLLLLLLLL.LLLLL.LLLLLL.LLLLLLLLLLLLLLL.LLLLLLLLLLL.LLLLLLLL.LLLLLL","..L..L..LLL..L...L.......LL..L..LLLL.L....L.LLL.L...L...LL...LL.L.L......L.......L....LL.L.","LLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLLLL.LLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLL.LLLLLLLLLLLLLLL","LLLLLL.LLLLLLLLL.LLLLLLL.LLLLLLLLLLLLLLL.LLLLLLLLLLLLLL.LLLLLLL.LLLLLLLLLLLLLLLLLLLL.LLLLLL","LLLLLL.LLLLLLLLL.LLLLLLL.LLLLLLLLLLLLLLL.LLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLL.LLLLLLLL.LLLLLL","LLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLL.LL.LL.LLLLL.LLLLLLLL.LLLLLL","LLLLL..LLLLLLLLLLLLLLLLL.LLLLLLLLL.LLLLLLLLLLLL.LLLLLLL.LLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLL","LLLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLL.LLLLLLL.LLLLLLLLLLLLL.LLLLLLLLLLLLLL.LLLLLL","LLLLLLLLLLLLLLLL.LLLLLLL.LLLLLLLLLLLLLLL.LLLLLL.LLLLLLLLLLLLLLL.LLLLL.LLLLL.LLLLLLLL.LLLLLL","LLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLLLL.LLLLLLLLLLLL.LLLLLLLLLLLLLLL.LLLLL.LLLLL.LLLLLLLL.LLLLLL","L...LLLLLLLL..L....L.L....L...LL..L.LL..L.L.L.L..L....L.....LL.........LL.L.....L.LL..L...L","LLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLLLLL.LLLLLLL.LLLLLLLLLLLLL.L.LLLLLLLLLLLLLLLLLLL","LLLLLL.LLLLLLLLL.LLLLLLL.LLLLLLLLL.LLLLL.LLLLLL.LLLLLLLLLLLLLLLLLLLLL.LLLLL.LLLLLLLLLLLLLLL","LLLLLLLLLLLLLLLL.LLLLLLL.LLLLLLLLLLLLL.LLLLLLLL.L.LLLLLLLLLLLLL.LLLLLLLLLLL.LLLLLLLL.LLLLLL","LLLLLL.LLLLLLLLL.L.LLLLLLLLLLLLLLL.LLLLL.L.LLLL.LLLLLLL.LLLLLLLLLLLLL.LLLLLLLLLLLLLL.LLLLLL","LLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLLLLLLL.LLLLLLL.LLLLL.LLLLL.LLLLLLLLLLLLLLL","LLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLL.LLLLLL.LLLLLLL.LLLLLLLLL.LLL.LLLLL.LLLLLLLLLLLLLLL","LLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLL.LLLLLL.LLLLLLL.LLLLLLL.LLLLL.LLLLL.LLLLLLL..LLLLLL",".L..LL....L..L.LL.......L.L.L.........L...L.L...LL......LL..L...L..L.L.L..L........L....L.L","LLLLLLL.LLLLLLLL.LLLLLLL..LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLL.LLLLL.LLLLLLLL.LLLLLL","LLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLLLL.LLLLL.LLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","LLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLL","LLLLLLLLLLLLLLLL.LLLLLLL.LLLLLLLLL.LLLLL.LLLLLL.LLLLLLL.LLLLLLL.LLLLL.LLLLL.LLLLLLLL.LLLLLL","LLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLL.LLLLLLLLLLLL.L.LLLLL.LLLLLLL.LLLLL.LLLLL.LLLLLLLL.LLLLLL","LLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLL.LLLLL.LLLLLLLLLLLLLL.LLLLLLL.LLLLLLLLLLLLLLLLLLLL.LLLLLL","LLLLLL.LLLLLLLLLLLLLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLLLLLLL.LLLLLL","..LL..L.LL..L........L.L..L.....L.L..L.L.....LL.LL...L....L..LL.L...LLLLL.L.L.....L.......L","LLLLLL.LLLLLLLLL.LLLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLLLLLLL.LLLLLLLLLLLLL.LLLLL.LLLLLLLL.LLLLLL","LLLLLLLLLLLLLLLL.LLLLLL.LLLLLLLLLLLLLLLL.LLLLLL.LLLLLLLLLLLLLLLLLLLLL.LLLLLLLLLLLLLL.LLLLLL","LLLLLL.LLLLLLLLL.LLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLLLLLLL.LLL.LL","LLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLL.LLLLLLLLLLLLLL.LLLLLLL.LLLLLLLLLLL.LLLLLLLL.LLLLLL","L.L..........L.L...LL...L....L..L.L..L.........LL...L..L...L...L.L.LLL.L.....LL....L......L","LLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLLLL.LLLLL.LLLLLL.LLLLLLL.LLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLL","LLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLLLLLLL.LLLLLLL.LLLLLLLLLLLLLLL.LLLL.LLLLLL","LLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLLLL.LLLL..LLLLLLLLLLLLLL.LLLLLLLLLLLLL.LL.LLLLLLLLLLL.LLLLLL","LLLLLL.LL.LLLLLL.LLLLLLLLLLLLLLLLLLLLLLL.LLLLLL.LLLLLLLLLLLLLLL.LLLLL.LLLLL.LLLLLLLL.LLLLLL","LLLLLL..LLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLL.LLLLLL.LLLLLLLLLLLLLLL.LLLLL.LLLLL.LLLLLLLL.LLLLLL","LLLLLL.LLLLLLLLL.LLLLLLL.LLLLLLLLL.LLLLL.LLLLLL.LLLLLLL.LLLLLLL.LL.LL.LLLLLLLLLLLLLLLLLLLLL","LLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLL.LLLLLL.LLLLLLLLLLLLLLL.LLLLL.LLLLL.LLLLLLLL.LLLLLL","LLLLLLLLLLLLLLLL.LLLLLLL.LLLLLLLLLLLLLLLLLLLLLL.LLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","LLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLL.LLLLLLL.LLLLLLLLLLLLLLLLLLLL.LLLLLL","LLLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLL.LLLLLLL.LLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLL","LLLLLL.LLLLLLLLL.LLLLLLL.LLLLLLLLL.LLLLL.LLLLLL.LLLLLLL.LLLLLLLLLLLLL.LLLLL.LLLLLLLL.LLLLLL","LLLLLL.LLLLLLLLL.LLLLLLL.LLLLLLLLL.LLLLL.LLLLLL.LLLLLLL.LLLLLLLLLLLLL.LLLLLLLLLLLLLL.LLLLLL","LLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLL.LLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLL.LLLLLL"]

old = b
while True:
    new=update_seats(old)
    if new == old:
        print("DONE")
        break
    else:
        old = new
    
count_taken(new)